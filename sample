from fastapi import FastAPI, HTTPException

# Initialize the FastAPI app
app = FastAPI()

# In-memory "database" for testing
items = {}


@app.get("/", tags=["Health Check"])
async def health_check():
    """
    Health check endpoint to verify the app is running.
    """
    return {"status": "Healthy", "message": "FastAPI is working!"}


@app.post("/items/{item_id}", tags=["Items"])
async def create_item(item_id: int, name: str):
    """
    Create an item with a given ID and name.
    """
    if item_id in items:
        raise HTTPException(status_code=400, detail="Item already exists.")
    items[item_id] = name
    return {"message": f"Item {item_id} created successfully.", "item": {item_id: name}}


@app.get("/items/{item_id}", tags=["Items"])
async def get_item(item_id: int):
    """
    Get an item by its ID.
    """
    if item_id not in items:
        raise HTTPException(status_code=404, detail="Item not found.")
    return {"item_id": item_id, "name": items[item_id]}


@app.delete("/items/{item_id}", tags=["Items"])
async def delete_item(item_id: int):
    """
    Delete an item by its ID.
    """
    if item_id not in items:
        raise HTTPException(status_code=404, detail="Item not found.")
    del items[item_id]
    return {"message": f"Item {item_id} deleted successfully."}


if __name__ == "__main__":
    import uvicorn
    uvicorn.run("sample:app", host="127.0.0.1", port=8000, reload=True)
